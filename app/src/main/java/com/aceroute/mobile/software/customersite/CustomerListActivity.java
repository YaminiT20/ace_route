package com.aceroute.mobile.software.customersite;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Intent;import android.graphics.Typeface;import android.os.Bundle;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnTouchListener;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.ListView;import android.widget.SearchView;import com.aceroute.mobile.software.BaseTabActivity;import com.aceroute.mobile.software.HeaderInterface;import com.aceroute.mobile.software.R;import com.aceroute.mobile.software.async.RespCBandServST;import com.aceroute.mobile.software.component.reference.Customer;import com.aceroute.mobile.software.component.reference.DataObject;import com.aceroute.mobile.software.dialog.TypeFaceFont;import com.aceroute.mobile.software.fragment.BaseFragment;import com.aceroute.mobile.software.http.RequestObject;import com.aceroute.mobile.software.http.Response;import com.aceroute.mobile.software.requests.CommonSevenReq;import com.aceroute.mobile.software.utilities.PreferenceHandler;import com.aceroute.mobile.software.utilities.ServiceError;import com.aceroute.mobile.software.utilities.Utilities;import org.w3c.dom.Element;import org.w3c.dom.NodeList;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Locale;import java.util.Map;/** * Shows a list_cal that can be filtered in-place with a SearchView in non-iconified mode. */@SuppressLint("NewApi")public class CustomerListActivity extends BaseFragment implements SearchView.OnQueryTextListener , HeaderInterface,RespCBandServST{    private static final String TAG = "SearchViewFilterMode";    private EditText mSearchView; //   RelativeLayout R_imgebck;    private ListView mListView;    private ArrayAdapter<String> mAdapter;    String xml;   // ImageView backbtn;   // TextView header, subheader;        Viewholder adapter;        ArrayList<String> custName,custTypeName;    ArrayList<Long> custId;        //new    HashMap< Long, Customer> custListMap;	private int GET_CUST_REQ = 1;	@Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        //super.onCreate1(savedInstanceState);        /*requestWindowFeature(Window.FEATURE_NO_TITLE);        getWindow().requestFeature(Window.FEATURE_ACTION_BAR);*/		mActivity.registerHeader(this);		if(PreferenceHandler.getCustomerHead(getActivity())!=null && !PreferenceHandler.getCustomerHead(mActivity).equals("")){			mActivity.setHeaderTitle("", "SELECT " + PreferenceHandler.getCustomerHead(getActivity()),"");		}else    		mActivity.setHeaderTitle("", "SELECT CUSTOMER", "");    	        View v = inflater.inflate(R.layout.customersitelist,null);        TypeFaceFont.overrideFonts(getActivity(),v);       // header = (TextView)v.findViewById(R.id.header_text_custlst);        Typeface tf = TypeFaceFont.getCustomTypeface(getActivity().getApplicationContext());       // header.setTypeface(tf);               // subheader=(TextView)findViewById(R.id.sub_header_text_custlist);        //subheader.setTypeface(tf);               /* Bundle extra = getArguments();        String message =extra.get("RequestStr").toString();*/                custName= new ArrayList<String>();        custTypeName= new ArrayList<String>();        custId = new ArrayList<Long>();                //code for getting customer list_cal xml        /*try        {	        long time1= 0L;	        RequestObject object = getRequestObject(Utilities.DEFAULT_ACTIVITY_REQUEST_ID_GETCUSTLIST,	        		message, time1);	        JSONObject jsonObject = JSONHandler.getJsonObject(object.getData().toString());	        	        JSONHandler jsonHandler = new JSONHandler(mActivity);	        long time = jsonHandler.getTime(jsonObject);	        	        String source = JSONHandler.getSource(jsonObject);	         //xml = DBEngine.getCustList(this, time,"localonly");laterYD	         Log.i("software", "custlist xml:"+xml);	         	         Element el[] =Utilities.parseXmls(xml,"cst");	         for(int i = 0 ; i < el.length;i++) {	        	 fillData(el[i]);			 }        }        catch(Exception e)        {        	e.printStackTrace();        }*/     	mSearchView = (EditText) v.findViewById(R.id.searchbox_custlist);        mSearchView.setTypeface(tf);        mListView = (ListView) v.findViewById(R.id.list_view_customer);        //YD TODO  request for customer list_cal from the customer class so to check null there		if (DataObject.customerXmlDataStore!= null && ((HashMap< Long, Customer>)DataObject.customerXmlDataStore).size()<1){			CommonSevenReq CommonReqObj = new CommonSevenReq();			CommonReqObj.setUrl("https://"+ PreferenceHandler.getPrefBaseUrl(getActivity())+"/mobi");			CommonReqObj.setSource("localonly");			// set action for each request here it self; //to make the get data generic			Customer.getData(CommonReqObj, mActivity , this, GET_CUST_REQ);		}		else {			setDataInAdp();		}        mSearchView.addTextChangedListener(new TextWatcher() {						@Override			public void onTextChanged(CharSequence s, int start, int before, int count) {				// TODO Auto-generated method stub				String text=mSearchView.getText().toString().toLowerCase(Locale.getDefault());				adapter.filter(text);							}						@Override			public void beforeTextChanged(CharSequence s, int start, int count,					int after) {				// TODO Auto-generated method stub							}						@Override			public void afterTextChanged(Editable s) {				// TODO Auto-generated method stub							}		});        		mListView.setOnTouchListener(new OnTouchListener() {			@Override			public boolean onTouch(View v, MotionEvent event) {				// TODO Auto-generated method stub								hideSoftKeyboard();				return false;			}		});                mListView.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> arg0, View view, int position,					long id) {								String x = (String) mListView.getItemAtPosition(position);								String data[] = x.split("##");				String cid = "";				String ctpnm = "";				String cnm = "";				if(data.length>0)					cid = data[0];				if(data.length>1)					cnm = data[1];				if(data.length>2)					ctpnm = data[2];												Sitelist siteFragment = new Sitelist();				Bundle extra = new Bundle();				extra.putString("CID", cid);				extra.putString("CNM", cnm);				extra.putString("CTYPENM", ctpnm);				extra.putInt("flag", 0);								siteFragment.setArguments(extra);				mActivity.pushFragments(Utilities.JOBS, siteFragment, true, true,BaseTabActivity.UI_Thread); //use this code YD								hideSoftKeyboard();			}            });             		return v;    }	//YD setting the adaptor if data is available then set directly else bringing data from database	private void setDataInAdp() {		custListMap = (HashMap<Long, Customer>) DataObject.customerXmlDataStore;		custListMap = sortCustomerLst(custListMap);		Long[] keys = custListMap.keySet().toArray(new Long[custListMap.size()]);		for (int i = 0; i < custListMap.size(); i++) {			fillData(custListMap.get(keys[i]));		}		adapter = new Viewholder(mActivity, custName, custId, custTypeName, 0);		mListView.setAdapter(adapter);	}	private void fillData(Customer customer) {    	custName.add(customer.getNm());		custId.add(customer.getId());		if (customer.getCustomerType()==null)			custTypeName.add(" ");		else 			custTypeName.add(customer.getCustomerType());		Log.i("software", "name :" + custName.get(0) + "id :" + custId.get(0));			}	// Sorting hashMap	private static HashMap<Long, Customer> sortCustomerLst(HashMap<Long, Customer> unsortMap) {		HashMap<Long, Customer> sortedMap = new LinkedHashMap<Long, Customer>();		if (unsortMap!=null){			// Convert Map to List			List<Map.Entry<Long, Customer>> list =					new LinkedList<Map.Entry<Long, Customer>>(unsortMap.entrySet());			// Sort list_cal with comparator, to compare the Map values			Collections.sort(list, new Comparator<Map.Entry<Long, Customer>>() {				public int compare(Map.Entry<Long, Customer> o1,								   Map.Entry<Long, Customer> o2) {					return (o1.getValue().getNm()).compareTo(o2.getValue().getNm());				}			});			// Convert sorted map back to a Map			for (Iterator<Map.Entry<Long, Customer>> it = list.iterator(); it.hasNext();) {				Map.Entry<Long, Customer> entry = it.next();				sortedMap.put(entry.getKey(), entry.getValue());			}		}		return sortedMap;	}	@Override    public void onStart() {    	// TODO Auto-generated method stub    	super.onStart();    	/*if (PreferenceHandler.getCurtSteCustdat(mActivity)==1)    	{    		PreferenceHandler.setCurtSteCustdat(mActivity,0);    		String x=PreferenceHandler.getCustSiteData(mActivity);    		Intent data = new Intent(mActivity, AceRoute.class);    		data.putExtra("ResultForJs", x);    		mActivity.setResult(mActivity.RESULT_OK, data);    		mActivity.popFragments();    	}*/    }        @Override    public void onResume() {    	// TODO Auto-generated method stub    	super.onResume();    	if (PreferenceHandler.getCurtSteCustdat(mActivity)==1)    	{    		PreferenceHandler.setCurtSteCustdat(mActivity,0);    		/*String x=PreferenceHandler.getCustSiteData(mActivity);    		Intent data = new Intent(mActivity, AceRoute.class);    		data.putExtra("ResultForJs", x);    		mActivity.setResult(mActivity.RESULT_OK, data);*/    		mActivity.popFragments(mActivity.UI_Thread);    	}    }        public boolean onQueryTextChange(String newText) {        if (TextUtils.isEmpty(newText)) {            mListView.clearTextFilter();        } else {            mListView.setFilterText(newText.toString());        }        return true;    }    public boolean onQueryTextSubmit(String query) {        return false;    }            public RequestObject getRequestObject(int id, String messageString,			long time) {		RequestObject object = new RequestObject();		object.setReqId(id);		object.setData(messageString);		//object.setJsinterface(jsInterface);		object.setTimeInMilliSeconds(time);		return object;	}            private void fillData(Element empEl) {		custName.add(getTextValue(empEl,"nm"));		custId.add(getIntValue(empEl,"id"));		custTypeName.add(getTextValue(empEl, "ctpnm"));		Log.i("software", "name :" + custName.get(0) + "id :" + custId.get(0));	}        private String getTextValue(Element ele, String tagName) {		String textVal = null;		NodeList nl = ele.getElementsByTagName(tagName);		if(nl != null && nl.getLength() > 0) {			Element el = (Element)nl.item(0);			if ((tagName=="nm" ||tagName=="id"||tagName=="ctpnm") && !(el.getChildNodes().getLength() > 0))			{				textVal = "";			}			else 				textVal = el.getFirstChild().getNodeValue();		}		return textVal;	}    private long getIntValue(Element ele, String tagName) {		//in production application you would catch the exception		return Long.parseLong(getTextValue(ele, tagName));	}	public void hideSoftKeyboard() {		if(mActivity.getCurrentFocus()!=null){			InputMethodManager inputMethodManager = (InputMethodManager) mActivity.getSystemService(Activity.INPUT_METHOD_SERVICE);			inputMethodManager.hideSoftInputFromWindow(mActivity.getCurrentFocus().getWindowToken(), 0);		}	}	public void loadDataOnBack(BaseTabActivity mActivity) {		mActivity.registerHeader(this);		if(PreferenceHandler.getCustomerHead(getActivity())!=null && !PreferenceHandler.getCustomerHead(mActivity).equals("")){			mActivity.setHeaderTitle("", "SELECT " + PreferenceHandler.getCustomerHead(getActivity()),"");		}else			mActivity.setHeaderTitle("", "SELECT CUSTOMER", "");		if (PreferenceHandler.getCurtSteCustdat(mActivity)==1)    	{    		PreferenceHandler.setCurtSteCustdat(mActivity,0);    		mActivity.popFragments(mActivity.UI_Thread);    	}	}	@Override	public void headerClickListener(String callingId) {		if (callingId.equals(BaseTabActivity.HeaderBackPressed)){			mActivity.setHeaderTitle("", "", "");		}	}	@Override	public void ServiceStarter(RespCBandServST activity, Intent intent) {	}	@Override	public void setResponseCallback(String response, Integer reqId) {	}	@Override	public void setResponseCBActivity(Response response) {		if (response!=null) {			if (response.getStatus().equals("success") &&					response.getErrorcode().equals(ServiceError.getEnumValstr(ServiceError.NO_ACTION_REQUIRED))) {				if (response.getId() == GET_CUST_REQ) {					DataObject.customerXmlDataStore = response.getResponseMap();					mActivity.runOnUiThread(new Runnable() {						@Override						public void run() {							setDataInAdp();						}					});				}			}		}	}}